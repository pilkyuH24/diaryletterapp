// widgets/setting/screen/notification_settings_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:diaryletter/providers/theme_provider.dart';
import 'package:diaryletter/providers/notification_provider.dart';

import 'package:flutter/foundation.dart';

class NotificationSettingsScreen extends StatelessWidget {
  const NotificationSettingsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final themeProv = context.watch<ThemeProvider>();
    final notificationProv = context.watch<NotificationProvider>();
    final tc = themeProv.colors;

    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: tc.surface,
        elevation: 0,
        scrolledUnderElevation: 0,
        surfaceTintColor: Colors.transparent,
        shadowColor: Colors.transparent,
        centerTitle: true,
        title: Text(
          'ÏïåÎ¶º ÏÑ§Ï†ï',
          style: TextStyle(
            color: tc.textPrimary,
            fontSize: 20,
            fontWeight: FontWeight.w700,
          ),
        ),
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios, color: tc.textPrimary),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Container(
        color: tc.surface,
        child: ListView(
          padding: const EdgeInsets.all(24),
          children: [
            // ÏïåÎ¶º ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
            _buildSection('ÏïåÎ¶º ÏÑ§Ï†ï', [
              _buildSwitchTile(
                title: 'ÏïåÎ¶º ÌôúÏÑ±Ìôî',
                subtitle: 'ÏùºÍ∏∞ ÏûëÏÑ± ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§',
                value: notificationProv.isEnabled,
                onChanged: (value) =>
                    notificationProv.toggleNotification(value),
                themeProv: themeProv,
              ),
            ], themeProv),

            // ÏïåÎ¶ºÏù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ÏóêÎßå ÎÇòÎ®∏ÏßÄ ÏòµÏÖò ÌëúÏãú
            if (notificationProv.isEnabled) ...[
              // ÏïåÎ¶º Î™®Îìú ÏÑ†ÌÉù
              _buildSection('ÏïåÎ¶º Ï£ºÍ∏∞', [
                _buildRadioTile<NotificationMode>(
                  title: 'Îß§Ïùº',
                  subtitle: 'Îß§Ïùº Í∞ôÏùÄ ÏãúÍ∞ÑÏóê ÏïåÎ¶º',
                  value: NotificationMode.daily,
                  groupValue: notificationProv.mode,
                  onChanged: (value) =>
                      notificationProv.setNotificationMode(value!),
                  themeProv: themeProv,
                ),
                _buildRadioTile<NotificationMode>(
                  title: 'ÌäπÏ†ï ÏöîÏùº',
                  subtitle: 'ÏÑ†ÌÉùÌïú ÏöîÏùºÏóêÎßå ÏïåÎ¶º',
                  value: NotificationMode.weekly,
                  groupValue: notificationProv.mode,
                  onChanged: (value) =>
                      notificationProv.setNotificationMode(value!),
                  themeProv: themeProv,
                ),
              ], themeProv),

              // ÏïåÎ¶º ÏãúÍ∞Ñ ÏÑ§Ï†ï
              _buildSection('ÏïåÎ¶º ÏãúÍ∞Ñ', [
                _buildTimeTile(
                  title: 'ÏïåÎ¶º ÏãúÍ∞Ñ',
                  subtitle: '${notificationProv.formattedTime}',
                  onTap: () =>
                      _showTimePicker(context, notificationProv, themeProv),
                  themeProv: themeProv,
                ),
              ], themeProv),

              // Ï£ºÍ∞Ñ Î™®ÎìúÏùº Îïå ÏöîÏùº ÏÑ†ÌÉù
              if (notificationProv.mode == NotificationMode.weekly)
                _buildSection('ÏïåÎ¶º ÏöîÏùº', [
                  _buildWeekdaySelector(notificationProv, themeProv),
                ], themeProv),

              // Ïª§Ïä§ÌÖÄ Î©îÏãúÏßÄ
              _buildSection('ÏïåÎ¶º Î©îÏãúÏßÄ', [
                _buildMessageTile(
                  title: 'ÏïåÎ¶º Î©îÏãúÏßÄ',
                  subtitle: notificationProv.customMessage,
                  onTap: () =>
                      _showMessageDialog(context, notificationProv, themeProv),
                  themeProv: themeProv,
                ),
              ], themeProv),

              // ‚óÜ ÌÖåÏä§Ìä∏ ÏïåÎ¶º ÏÑπÏÖò: ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÏóêÏÑúÎßå ÎÖ∏Ï∂ú
              if (notificationProv.isEnabled && kDebugMode)
                // ÌÖåÏä§Ìä∏ ÏïåÎ¶º
                _buildSection('ÌÖåÏä§Ìä∏', [
                  _buildActionTile(
                    title: 'Ï¶âÏãú ÌÖåÏä§Ìä∏ ÏïåÎ¶º',
                    subtitle: 'ÏßÄÍ∏à Î∞îÎ°ú ÏïåÎ¶ºÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
                    icon: Icons.notifications_active,
                    onTap: () =>
                        _sendTestNotification(context, notificationProv),
                    themeProv: themeProv,
                  ),
                  // üÜï iOS Î∞±Í∑∏ÎùºÏö¥Îìú ÌÖåÏä§Ìä∏Ïö©
                  if (Platform.isIOS)
                    _buildActionTile(
                      title: '1Î∂Ñ ÌõÑ ÌÖåÏä§Ìä∏ ÏïåÎ¶º',
                      subtitle: 'Î∞±Í∑∏ÎùºÏö¥Îìú ÏïåÎ¶º ÌÖåÏä§Ìä∏ (iOS Ï†ÑÏö©)',
                      icon: Icons.schedule,
                      onTap: () => _sendDelayedTestNotification(
                        context,
                        notificationProv,
                      ),
                      themeProv: themeProv,
                    ),
                  // üî¥ Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏ Î≤ÑÌäº Ï∂îÍ∞Ä
                  _buildActionTile(
                    title: 'Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏',
                    subtitle: 'Î±ÉÏßÄÎ•º Í∞ïÏ†úÎ°ú Ï†úÍ±∞Ìï©ÎãàÎã§',
                    icon: Icons.clear_all,
                    onTap: () => _testBadgeClear(context, notificationProv),
                    themeProv: themeProv,
                  ),
                ], themeProv),
            ],

            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }

  Widget _buildSection(
    String title,
    List<Widget> children,
    ThemeProvider themeProv,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 4),
        Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontSize: 18,
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 6,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Column(children: children),
        ),
        const SizedBox(height: 16),
      ],
    );
  }

  Widget _buildSwitchTile({
    required String title,
    required String subtitle,
    required bool value,
    required Function(bool) onChanged,
    required ThemeProvider themeProv,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: SwitchListTile(
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textSecondary,
            fontSize: 12,
          ),
        ),
        value: value,
        onChanged: onChanged,
        activeColor: themeProv.colors.primary,
      ),
    );
  }

  Widget _buildRadioTile<T>({
    required String title,
    required String subtitle,
    required T value,
    required T groupValue,
    required Function(T?) onChanged,
    required ThemeProvider themeProv,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: RadioListTile<T>(
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textSecondary,
            fontSize: 12,
          ),
        ),
        value: value,
        groupValue: groupValue,
        onChanged: onChanged,
        activeColor: themeProv.colors.primary,
      ),
    );
  }

  Widget _buildTimeTile({
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    required ThemeProvider themeProv,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        leading: Icon(Icons.access_time, color: themeProv.colors.primary),
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textSecondary,
            fontSize: 14,
            fontWeight: FontWeight.w600,
          ),
        ),
        trailing: Icon(
          Icons.arrow_forward_ios,
          size: 16,
          color: themeProv.colors.textPrimary,
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildMessageTile({
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    required ThemeProvider themeProv,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        leading: Icon(Icons.message, color: themeProv.colors.primary),
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textSecondary,
            fontSize: 12,
          ),
          maxLines: 2,
          overflow: TextOverflow.ellipsis,
        ),
        trailing: Icon(
          Icons.arrow_forward_ios,
          size: 16,
          color: themeProv.colors.textPrimary,
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildActionTile({
    required String title,
    required String subtitle,
    required IconData icon,
    required VoidCallback onTap,
    required ThemeProvider themeProv,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        leading: Icon(icon, color: themeProv.colors.primary),
        title: Text(
          title,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontWeight: FontWeight.w600,
            color: themeProv.colors.textPrimary,
          ),
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textSecondary,
            fontSize: 12,
          ),
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildWeekdaySelector(
    NotificationProvider notificationProv,
    ThemeProvider themeProv,
  ) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6.0),
      decoration: BoxDecoration(
        color: themeProv.colors.background,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'ÏöîÏùº ÏÑ†ÌÉù',
              style: TextStyle(
                fontFamily: 'OngeulipKonKonche',
                fontWeight: FontWeight.w600,
                color: themeProv.colors.textPrimary,
                fontSize: 16,
              ),
            ),
            const SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: List.generate(7, (index) {
                final isSelected = notificationProv.selectedWeekdays[index];
                return GestureDetector(
                  onTap: () => notificationProv.toggleWeekday(index),
                  child: Container(
                    width: 36,
                    height: 36,
                    decoration: BoxDecoration(
                      color: isSelected
                          ? themeProv.colors.primary
                          : Colors.transparent,
                      border: Border.all(
                        color: isSelected
                            ? themeProv.colors.primary
                            : themeProv.colors.textSecondary,
                        width: 1.5,
                      ),
                      borderRadius: BorderRadius.circular(18),
                    ),
                    child: Center(
                      child: Text(
                        notificationProv.weekdayNames[index],
                        style: TextStyle(
                          fontFamily: 'OngeulipKonKonche',
                          fontWeight: FontWeight.w600,
                          color: isSelected
                              ? Colors.white
                              : themeProv.colors.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                    ),
                  ),
                );
              }),
            ),
            const SizedBox(height: 8),
            Text(
              'ÏÑ†ÌÉùÎêú ÏöîÏùº: ${notificationProv.selectedWeekdaysText}',
              style: TextStyle(
                fontFamily: 'OngeulipKonKonche',
                color: themeProv.colors.textSecondary,
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _showTimePicker(
    BuildContext context,
    NotificationProvider notificationProv,
    ThemeProvider themeProv,
  ) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: notificationProv.time,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            timePickerTheme: TimePickerThemeData(
              dialBackgroundColor: themeProv.colors.primary,
              hourMinuteTextColor: themeProv.colors.background,
              entryModeIconColor: themeProv.colors.textSecondary,
              dialHandColor: themeProv.isDarkMode
                  ? themeProv.colors.textSecondary
                  : themeProv.colors.background,
              dialTextColor: MaterialStateColor.resolveWith((states) {
                return states.contains(MaterialState.selected)
                    ? themeProv.colors.primary
                    // : themeProv.colors.textPrimary;
                    : themeProv.colors.background;
              }),
              dialTextStyle: WidgetStateTextStyle.resolveWith((states) {
                return TextStyle(
                  fontWeight: states.contains(WidgetState.selected)
                      ? FontWeight.w700
                      : FontWeight.normal,
                );
              }),
              backgroundColor: themeProv.colors.background,
              helpTextStyle: TextStyle(
                color: Colors.grey[600],
                fontSize: 14,
              ), // ÏÉÅÎã® "Select time" ÌÖçÏä§Ìä∏
              cancelButtonStyle: TextButton.styleFrom(
                foregroundColor: themeProv.colors.textSecondary,
                textStyle: const TextStyle(
                  fontSize: 14,
                  fontFamily: 'OngeulipKonKonche',
                ),
              ), // Cancel Î≤ÑÌäº
              confirmButtonStyle: TextButton.styleFrom(
                foregroundColor: themeProv.colors.textSecondary,
                textStyle: const TextStyle(
                  fontSize: 14,
                  fontFamily: 'OngeulipKonKonche',
                ),
              ), // OK Î≤ÑÌäº
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null) {
      await notificationProv.setNotificationTime(picked);
    }
  }

  Future<void> _showMessageDialog(
    BuildContext context,
    NotificationProvider notificationProv,
    ThemeProvider themeProv,
  ) async {
    final TextEditingController controller = TextEditingController(
      text: notificationProv.customMessage,
    );

    final result = await showDialog<String>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: themeProv.colors.background,
        title: Text(
          'ÏïåÎ¶º Î©îÏãúÏßÄ ÏÑ§Ï†ï',
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            fontSize: 18,
            color: themeProv.colors.textPrimary,
          ),
        ),
        content: TextField(
          controller: controller,
          maxLines: 3,
          maxLength: 100,
          style: TextStyle(
            fontFamily: 'OngeulipKonKonche',
            color: themeProv.colors.textPrimary,
          ),
          decoration: InputDecoration(
            hintText: 'ÏïåÎ¶º Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
            hintStyle: TextStyle(
              fontFamily: 'OngeulipKonKonche',
              color: themeProv.colors.textSecondary,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: themeProv.colors.textSecondary),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: themeProv.colors.primary),
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: Text(
              'Ï∑®ÏÜå',
              style: TextStyle(
                fontFamily: 'OngeulipKonKonche',
                color: themeProv.colors.textSecondary,
              ),
            ),
          ),
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(controller.text),
            child: Text(
              'ÌôïÏù∏',
              style: TextStyle(
                fontFamily: 'OngeulipKonKonche',
                color: themeProv.colors.primary,
              ),
            ),
          ),
        ],
      ),
    );

    if (result != null && result.isNotEmpty) {
      await notificationProv.setCustomMessage(result);
    }
  }

  Future<void> _sendTestNotification(
    BuildContext context,
    NotificationProvider notificationProv,
  ) async {
    await notificationProv.sendTestNotification();

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'ÌÖåÏä§Ìä∏ ÏïåÎ¶ºÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§!',
            style: TextStyle(fontFamily: 'OngeulipKonKonche'),
          ),
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }

  /// üÜï 1Î∂Ñ ÌõÑ ÌÖåÏä§Ìä∏ ÏïåÎ¶º (iOS Î∞±Í∑∏ÎùºÏö¥Îìú ÌÖåÏä§Ìä∏Ïö©)
  Future<void> _sendDelayedTestNotification(
    BuildContext context,
    NotificationProvider notificationProv,
  ) async {
    await notificationProv.sendDelayedTestNotification();

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '1Î∂Ñ ÌõÑ ÏïåÎ¶ºÏù¥ ÏÑ§Ï†ïÎê®! Ïï±ÏùÑ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Î≥¥ÎÇ¥ÏÑ∏Ïöî üì±',
            style: TextStyle(fontFamily: 'OngeulipKonKonche'),
          ),
          duration: const Duration(seconds: 4),
          backgroundColor: Colors.orange,
        ),
      );
    }
  }

  /// üî¥ Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏ Î©îÏÑúÎìú Ï∂îÍ∞Ä
  Future<void> _testBadgeClear(
    BuildContext context,
    NotificationProvider notificationProv,
  ) async {
    try {
      debugPrint('üß™ [Test] Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏ ÏãúÏûë');

      await notificationProv.clearBadge();

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÏôÑÎ£å! üì±',
              style: TextStyle(fontFamily: 'OngeulipKonKonche'),
            ),
            duration: const Duration(seconds: 2),
            backgroundColor: Colors.green,
          ),
        );
      }

      debugPrint('‚úÖ [Test] Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏ ÏôÑÎ£å');
    } catch (e) {
      debugPrint('‚ùå [Test] Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ ÌÖåÏä§Ìä∏ Ïã§Ìå®: $e');

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Î±ÉÏßÄ ÌÅ¥Î¶¨Ïñ¥ Ïã§Ìå®: $e',
              style: TextStyle(fontFamily: 'OngeulipKonKonche'),
            ),
            duration: const Duration(seconds: 3),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
